#include <iostream>
#include <iomanip>
#include <vector>
#include <sstream>
#include <string>
#include <locale>

const int NUM_DISCIPLINAS = 3;
const int NUM_NOTAS = 3;
const int TAM = 25;

struct Disciplina {
    std::string nome;
    float notas[NUM_NOTAS];
    float media;
    float notaRecuperacao;
    float mediaFinal;
    std::string status;
};

float string_to_float(const std::string& str) {
    std::istringstream iss(str);
    float num;
    iss >> num;
    return num;
}

std::string float_to_string(float num) {
    std::ostringstream oss;
    oss << num;
    return oss.str();
}

void ler_notas(Disciplina& disciplina, const std::vector<std::string>& listaCabecalho) {
    for (int j = 0; j < NUM_NOTAS; j++) {
        std::cout << disciplina.nome << " - Digite a nota da " << listaCabecalho[j + 1] << ": ";
        std::cin >> disciplina.notas[j];
    }
}

void calcular_media_e_status(Disciplina& disciplina) {
    disciplina.media = (disciplina.notas[0] + disciplina.notas[1] + disciplina.notas[2]) / NUM_NOTAS;
    if (disciplina.media >= 6) {
        disciplina.status = "Aprovado";
    } else if (disciplina.media >= 4) {
        disciplina.status = "Recuperacao";
    } else {
        disciplina.status = "Reprovado";
    }
}


void ler_nota_recuperacao(Disciplina& disciplina, const std::vector<std::string>& listaCabecalho) {
    std::cout << "Estudante em recuperação na disciplina " << disciplina.nome << "." << std::endl;
    std::cout << "Digite a nota da " << listaCabecalho[NUM_NOTAS+ 2] << " da disciplina " << disciplina.nome << ": ";
    std::cin >> disciplina.notaRecuperacao;
}

void calcular_media_final_e_status(Disciplina& disciplina) {
    disciplina.media = (disciplina.notas[0] + disciplina.notas[1] + disciplina.notas[2]) / NUM_NOTAS;
    if (disciplina.media >= 6) {
        disciplina.status = "Aprovado";
    } else if (disciplina.media >= 4 && disciplina.media < 6) {
        disciplina.status = "Recuperacao";
    } else {
        disciplina.status = "Reprovado";
    }
}

void imprimir_cabecalho(const std::vector<std::string>& listaCabecalho) {
    for (const std::string& cabecalho : listaCabecalho) {
        std::cout << "|" << std::setw(TAM) << cabecalho << "|";
    }
    std::cout << std::endl;
}

void imprimir_disciplina(const Disciplina& disciplina) {
    std::cout << "|" << std::setw(TAM) << disciplina.nome << "|";
    for (int i = 0; i < NUM_NOTAS; i++) {
        std::cout << "|" << std::setw(TAM) << disciplina.notas[i] << "|";
    }
    std::cout << "|" << std::setw(TAM) << disciplina.media << "|";
    std::cout << "|" << std::setw(TAM) << disciplina.notaRecuperacao << "|";
    std::cout << "|" << std::setw(TAM) << disciplina.mediaFinal << "|";
    std::cout << "|" << std::setw(TAM) << disciplina.status << "|";
    std::cout << std::endl;
}

int main() {
    std::vector<std::string> listaCabecalho = {"Disciplina", "P1", "P2", "TR", "MEDIA", "P3", "MEDIA FINAL", "STATUS"};
    std::vector<Disciplina> disciplinas(NUM_DISCIPLINAS);

    disciplinas[0].nome = "Estrutura de Dados";
    disciplinas[1].nome = "Estatistica Aplicada";
    disciplinas[2].nome = "Engenharia de Software";

    for (int i = 0; i < NUM_DISCIPLINAS; i++) {
        ler_notas(disciplinas[i], listaCabecalho);
        calcular_media_e_status(disciplinas[i]);

        if (disciplinas[i].status == "Recuperacao") {
            ler_nota_recuperacao(disciplinas[i], listaCabecalho);
            calcular_media_final_e_status(disciplinas[i]);
        } else {
            disciplinas[i].notaRecuperacao = -1; 
            disciplinas[i].mediaFinal = disciplinas[i].media;
        }
    }

    std::cout << std::endl;
    imprimir_cabecalho(listaCabecalho);
    for (int i = 0; i < NUM_DISCIPLINAS; i++) {
        imprimir_disciplina(disciplinas[i]);
    }

    return 0;
}
